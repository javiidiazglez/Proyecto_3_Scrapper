@echo off
setlocal enabledelayedexpansion

REM Script para ejecutar todas las pruebas en Windows
echo üß™ Ejecutando suite completa de pruebas...
echo ======================================

REM Verificar si Node.js est√° instalado
node --version >nul 2>&1
if %errorlevel% neq 0 (
    echo ‚ùå Node.js no est√° instalado. Por favor instala Node.js y npm.
    pause
    exit /b 1
)

REM Verificar si npm est√° instalado
npm --version >nul 2>&1
if %errorlevel% neq 0 (
    echo ‚ùå npm no est√° instalado. Por favor instala npm.
    pause
    exit /b 1
)

echo ‚ÑπÔ∏è  Verificando dependencias...

REM Instalar dependencias si no existen
if not exist "node_modules" (
    echo ‚ÑπÔ∏è  Instalando dependencias...
    npm install
    if %errorlevel% neq 0 (
        echo ‚ùå Error al instalar dependencias
        pause
        exit /b 1
    )
)

REM Crear directorio de reportes si no existe
if not exist "reports" mkdir reports

echo ‚ÑπÔ∏è  Iniciando pruebas...

REM Contador de pruebas
set /a passed=0
set /a failed=0

REM 1. Validaci√≥n HTML
echo ‚ÑπÔ∏è  Ejecutando validaci√≥n HTML...
node tests/html-validator.js > reports/html-validation.log 2>&1
if %errorlevel% equ 0 (
    echo ‚úÖ Validaci√≥n HTML: PASADA
    set /a passed+=1
) else (
    echo ‚ùå Validaci√≥n HTML: FALLIDA
    set /a failed+=1
    echo Ver reports/html-validation.log para detalles
)

REM 2. Validaci√≥n CSS
echo ‚ÑπÔ∏è  Ejecutando validaci√≥n CSS...
node tests/css-validator.js > reports/css-validation.log 2>&1
if %errorlevel% equ 0 (
    echo ‚úÖ Validaci√≥n CSS: PASADA
    set /a passed+=1
) else (
    echo ‚ùå Validaci√≥n CSS: FALLIDA
    set /a failed+=1
    echo Ver reports/css-validation.log para detalles
)

REM 3. Pruebas Jest
echo ‚ÑπÔ∏è  Ejecutando pruebas Jest...
npm test > reports/jest-tests.log 2>&1
if %errorlevel% equ 0 (
    echo ‚úÖ Pruebas Jest: PASADAS
    set /a passed+=1
) else (
    echo ‚ùå Pruebas Jest: FALLIDAS
    set /a failed+=1
    echo Ver reports/jest-tests.log para detalles
)

REM 4. Pruebas de accesibilidad
echo ‚ÑπÔ∏è  Ejecutando pruebas de accesibilidad...
timeout /t 60 /nobreak > nul
node tests/accessibility-test.js > reports/accessibility-tests.log 2>&1
if %errorlevel% equ 0 (
    echo ‚úÖ Pruebas de accesibilidad: PASADAS
    set /a passed+=1
) else (
    echo ‚ùå Pruebas de accesibilidad: FALLIDAS
    set /a failed+=1
    echo Ver reports/accessibility-tests.log para detalles
)

REM 5. Pruebas de rendimiento
echo ‚ÑπÔ∏è  Ejecutando pruebas de rendimiento...
timeout /t 60 /nobreak > nul
node tests/performance-test.js > reports/performance-tests.log 2>&1
if %errorlevel% equ 0 (
    echo ‚úÖ Pruebas de rendimiento: PASADAS
    set /a passed+=1
) else (
    echo ‚ùå Pruebas de rendimiento: FALLIDAS
    set /a failed+=1
    echo Ver reports/performance-tests.log para detalles
)

REM 6. Generar reporte de cobertura
echo ‚ÑπÔ∏è  Generando reporte de cobertura...
npm run test:coverage > reports/coverage.log 2>&1
if %errorlevel% equ 0 (
    echo ‚úÖ Reporte de cobertura: GENERADO
    echo ‚ÑπÔ∏è  Ver coverage/index.html para detalles
) else (
    echo ‚ö†Ô∏è  Reporte de cobertura: ERROR
)

REM Resumen final
echo.
echo ======================================
echo ‚ÑπÔ∏è  RESUMEN DE PRUEBAS
echo ======================================
echo ‚úÖ Pruebas pasadas: !passed!
echo ‚ùå Pruebas fallidas: !failed!
set /a total=!passed!+!failed!
echo ‚ÑπÔ∏è  Total de pruebas: !total!

if !failed! equ 0 (
    echo üéâ ¬°Todas las pruebas pasaron!
    pause
    exit /b 0
) else (
    echo ‚ùå !failed! prueba(s) fallaron
    echo ‚ö†Ô∏è  Revisa los archivos de log en el directorio reports/
    pause
    exit /b 1
)
